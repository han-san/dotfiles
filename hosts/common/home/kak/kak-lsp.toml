snippet_support = true
verbosity = 2

# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - TypeScript: https://github.com/microsoft/vscode-languageserver-node/blob/2645fb54ea1e764aff71dee0ecc8aceff3aabf56/client/src/common/semanticTokens.ts#L58
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/f6da603c7fe56c19a275dc7bab1f30fe1ad39707/crates/ide/src/syntax_highlighting.rs#L42
# [[semantic_tokens]]
# token = "comment"
# face = "documentation"
# modifiers = ["documentation"]

# [[semantic_tokens]]
# token = "comment"
# face = "comment"

# [[semantic_tokens]]
# token = "function"
# face = "function"

# [[semantic_tokens]]
# token = "keyword"
# face = "keyword"

# [[semantic_tokens]]
# token = "namespace"
# face = "module"

# [[semantic_tokens]]
# token = "operator"
# face = "operator"

# [[semantic_tokens]]
# token = "string"
# face = "string"

# [[semantic_tokens]]
# token = "type"
# face = "type"

# [[semantic_tokens]]
# token = "variable"
# face = "default+d"
# modifiers = ["readonly"]

# [[semantic_tokens]]
# token = "variable"
# face = "default+d"
# modifiers = ["constant"]

# [[semantic_tokens]]
# token = "variable"
# face = "variable"

[server]
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
timeout = 1800 # seconds = 30 minutes

[language.typst]
filetypes = ["typst"]
roots = [".git"]
command = "typst-lsp"

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", ".clangd"]
command = "clangd"
args = ["--clang-tidy"]

[language.csharp]
filetypes = ["csharp"]
roots = [".git"]
command = "OmniSharp"
args = ["-lsp"]

[language.cmake]
filetypes = ["cmake"]
roots = [".git"]
command = "cmake-language-server"

[language.crystal]
filetypes = ["crystal"]
roots = ["shard.yml"]
command = "scry"

[language.css]
filetypes = ["css"]
roots = ["package.json", ".git"]
command = "css-languageserver"
args = ["--stdio"]

[language.less]
filetypes = ["less"]
roots = ["package.json", ".git"]
command = "css-languageserver"
args = ["--stdio"]

[language.scss]
filetypes = ["scss"]
roots = ["package.json", ".git"]
command = "css-languageserver"
args = ["--stdio"]

[language.d]
filetypes = ["d", "di"]
roots = [".git", "dub.sdl", "dub.json"]
command = "dls"

[language.dart]
filetypes = ["dart"]
roots = ["pubspec.yaml", ".git"]
command = "dart"
args = ["language-server"]

[language.elixir]
filetypes = ["elixir"]
roots = ["mix.exs"]
command = "elixir-ls"

[language.elm]
filetypes = ["elm"]
roots = ["elm.json"]
command = "elm-language-server"
args = ["--stdio"]
settings_section = "elmLS"

[language.elm.settings.elmLS]
runtime = "node"
elmPath = "elm"
elmFormatPath = "elm-format"
elmTestPath = "elm-test"

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
offset_encoding = "utf-8"
settings_section = "gopls"

[language.go.settings.gopls]
#

[language.haskell]
filetypes = ["haskell"]
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
command = "haskell-language-server-wrapper"
args = ["--lsp"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "html-languageserver"
args = ["--stdio"]

# [language.deno]
# filetypes = ["typescript", "javascript"]
# roots = [".git"]
# command = "deno"
# args = ["lsp"]
# settings_section = "denosettings"

# [language.deno.settings.denosettings]
# enable = true
# lint = true

[language.jsx]
filetypes = ["javascript"]
roots = ["package.json", "tsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]

[language.tsx]
filetypes = ["typescript"]
roots = ["package.json", "tsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]

[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "json-languageserver"
args = ["--stdio"]

[language.latex]
filetypes = ["latex"]
roots = [".git"]
command = "texlab"

[language.lua]
filetypes = ["lua"]
roots = [".git"]
command = "lua-language-server"

[language.nim]
filetypes = ["nim"]
roots = ["*.nimble", ".git"]
command = "nimlsp"

# FIXME: rnix is unmaintained, switch to something else.
# [language.nix]
# filetypes = ["nix"]
# roots = ["flake.nix", "shell.nix", ".git"]
# command = "rnix-lsp"

[language.ocaml]
filetypes = ["ocaml"]
roots = ["Makefile", "opam", "*.opam", "dune"]
command = "ocamllsp"

[language.php]
filetypes = ["php"]
roots = [".htaccess", "composer.json"]
command = "intelephense"
args = ["--stdio"]
settings_section = "intelephense"

[language.php.settings]
intelephense.storagePath = "/tmp/intelephense"

# [language.python]
# filetypes = ["python"]
# roots = ["requirements.txt", "setup.py", ".git", ".hg"]
# command = "pyls"
# offset_encoding = "utf-8"

[language.python]
filetypes = ["python"]
roots = [".git"]
command = "pylsp"

[language.reason]
filetypes = ["reason"]
roots = ["package.json", "Makefile", ".git", ".hg"]
command = "ocaml-language-server"
args = ["--stdio"]

[language.ruby]
filetypes = ["ruby"]
roots = ["Gemfile"]
command = "solargraph"
args = ["stdio"]

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = ["-c", "if command -v rustup >/dev/null; then $(rustup which rust-analyzer); else rust-analyzer; fi"]

# [language.rust.initialization_options]
# # If you get 'unresolved proc macro' warnings, you have two options
# # 1. The safe choice is two disable the warning:
# diagnostics.disabled = ["unresolved-proc-macro"]
# # 2. Or you can opt-in for proc macro support
# procMacro.enable = true
# cargo.loadOutDirsFromCheck = true
# # See https://github.com/rust-analyzer/rust-analyzer/issues/6448

[language.terraform]
filetypes = ["terraform"]
roots = ["*.tf"]
command = "terraform-ls"
args = ["serve"]

[language.yaml]
filetypes = ["yaml"]
roots = [".git"]
command = "yaml-language-server"
args = ["--stdio"]

[language.zig]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"

